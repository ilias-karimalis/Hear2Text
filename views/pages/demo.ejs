<!DOCTYPE html>
<html lang="en">

<head>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>Hear2Text :: Demo</title>

    <!-- Custom fonts for this template-->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.9.0/css/all.min.css" rel="stylesheet"
        type="text/css">
    <link
        href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i"
        rel="stylesheet">

    <!-- Custom styles for this template-->
    <link href="/stylesheets/sb-admin-2.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
        integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <script src="https://cdn.agora.io/sdk/web/AgoraRTCSDK-2.7.0.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>

</head>

<body id="page-top">
    <style>
        #messages {
            list-style: none;
        }

        #messages li:nth-child(odd) {
            background: lightgrey;
        }
    </style>

    <!-- Page Wrapper -->
    <div id="wrapper">

        <!-- Sidebar -->
        <ul class="navbar-nav bg-gradient-primary sidebar sidebar-dark accordion" id="accordionSidebar">

            <!-- Sidebar - Brand -->
            <a class="sidebar-brand d-flex align-items-center justify-content-center">
                <div class="sidebar-brand-icon rotate-n-15">
                    <i class="fas fa-microphone-alt"></i>
                </div>
                <div class="sidebar-brand-text mx-3">Hear2Text</div>
            </a>

            <!-- Divider -->
            <hr class="sidebar-divider my-0">

            <!-- Nav Item - Dashboard -->
            <li class="nav-item active">
                <a class="nav-link">
                    <i class="fas fa-fw fa-tachometer-alt"></i>
                    <span>Dashboard</span></a>
            </li>

            <!-- Divider -->
            <hr class="sidebar-divider">

            <!-- Heading -->
            <div class="sidebar-heading">
                Products
            </div>

            <!-- Nav Item - Pages Collapse Menu -->
            <li class="nav-item">
                <a class="nav-link">
                    <i class="fas fa-fw fa-user"></i>
                    <span>Personal</span>
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link">
                    <i class="fas fa-fw fa-university"></i>
                    <span>Education</span>
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link">
                    <i class="fas fa-fw fa-briefcase"></i>
                    <span>Corporate</span>
                </a>
            </li>

            <!-- Divider -->
            <hr class="sidebar-divider">

            <!-- Heading -->
            <div class="sidebar-heading">
                Settings
            </div>


            <!-- Nav Item - Charts -->
            <li class="nav-item">
                <a class="nav-link">
                    <i class="fas fa-fw fa-cog"></i>
                    <span>Settings</span></a>
            </li>

            <!-- Divider -->
            <hr class="sidebar-divider d-none d-md-block">

            <!-- Sidebar Toggler (Sidebar) -->
            <div class="text-center d-none d-md-inline">
                <button class="rounded-circle border-0" id="sidebarToggle"></button>
            </div>

        </ul>
        <!-- End of Sidebar -->

        <!-- content -->
        <div id="div_device" class="panel panel-default" hidden>
            <div class="select">
                <label for="audioSource">Audio source: </label><select id="audioSource"></select>
            </div>
            <div class="select">
                <label for="videoSource">Video source: </label><select id="videoSource"></select>
            </div>
        </div>

        <div id="div_join" class="panel panel-default" hidden>
            <div class="panel-body">
                Host: <input id="video" type="checkbox" checked></input>
                <button id="join" class="btn btn-primary" onclick="join()">Join</button>
                <button id="leave" class="btn btn-primary" onclick="leave()">Leave</button>
                <button id="publish" class="btn btn-primary" onclick="publish()">Publish</button>
                <button id="unpublish" class="btn btn-primary" onclick="unpublish()">Unpublish</button>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-9" id="video" style="margin:0 auto;">
                <div id="agora_local" style="float:right;width:225px;height:20%;display:inline-block;"></div>
            </div>

            <div class="col-sm-3">
                <div class="row" style="height: 50%; width: 300px; overflow:scroll">
                    <ul id="messages"></ul>
                    <form action="" hidden>
                        <input id="m" autocomplete="off" /><button>Send</button>
                    </form>
                </div>

                <div class="row" style="height: 50%; width: 300px">
                    <% include ../partials/transcribe %>
                </div>
            </div>
        </div>
        <!-- end of content -->

    </div>
    <!-- End of Content Wrapper -->

    </div>
    <!-- End of Page Wrapper -->

    <!-- Scroll to Top Button-->
    <a class="scroll-to-top rounded" href="#page-top">
        <i class="fas fa-angle-up"></i>
    </a>

    <!-- agora script -->
    <script language="javascript">
        $(document).ready(() => {
            join();
        });

        if (!AgoraRTC.checkSystemRequirements()) {
            alert("Your browser does not support WebRTC!");
        }

        /* select Log type */
        // AgoraRTC.Logger.setLogLevel(AgoraRTC.Logger.NONE);
        // AgoraRTC.Logger.setLogLevel(AgoraRTC.Logger.ERROR);
        // AgoraRTC.Logger.setLogLevel(AgoraRTC.Logger.WARNING);
        // AgoraRTC.Logger.setLogLevel(AgoraRTC.Logger.INFO);  
        // AgoraRTC.Logger.setLogLevel(AgoraRTC.Logger.DEBUG);

        /* simulated data to proof setLogLevel() */
        AgoraRTC.Logger.error('this is error');
        AgoraRTC.Logger.warning('this is warning');
        AgoraRTC.Logger.info('this is info');
        AgoraRTC.Logger.debug('this is debug');

        var client, localStream, camera, microphone;

        var audioSelect = document.querySelector('select#audioSource');
        var videoSelect = document.querySelector('select#videoSource');

        function join() {
            document.getElementById("join").disabled = true;
            document.getElementById("video").disabled = true;
            var channel_key = null;

            client = AgoraRTC.createClient({ mode: 'live' });
            client.init('0067d005b58e5ca43d3926e0cf078528c05IAC/lS5Sjldks+3IHqsxvYYEfEtPgsMtPQC+M5q4DOYok0G7rQEAAAAAEAA0shE1v88sXQEAAQC+zyxd', function () {
                console.log("AgoraRTC client initialized");
                client.join(channel_key, 'angelhack', null, function (uid) {
                    console.log("User " + uid + " join channel successfully");

                    if (document.getElementById("video").checked) {
                        camera = videoSource.value;
                        microphone = audioSource.value;
                        localStream = AgoraRTC.createStream({ streamID: uid, audio: true, cameraId: camera, microphoneId: microphone, video: document.getElementById("video").checked, screen: false });
                        //localStream = AgoraRTC.createStream({streamID: uid, audio: false, cameraId: camera, microphoneId: microphone, video: false, screen: true, extensionId: 'minllpmhdgpndnkomcoccfekfegnlikg'});
                        if (document.getElementById("video").checked) {
                            localStream.setVideoProfile('720p_3');

                        }

                        // The user has granted access to the camera and mic.
                        localStream.on("accessAllowed", function () {
                            console.log("accessAllowed");
                        });

                        // The user has denied access to the camera and mic.
                        localStream.on("accessDenied", function () {
                            console.log("accessDenied");
                        });

                        localStream.init(function () {
                            console.log("getUserMedia successfully");
                            localStream.play('agora_local');

                            client.publish(localStream, function (err) {
                                console.log("Publish local stream error: " + err);
                            });

                            client.on('stream-published', function (evt) {
                                console.log("Publish local stream successfully");
                            });
                        }, function (err) {
                            console.log("getUserMedia failed", err);
                        });
                    }
                }, function (err) {
                    console.log("Join channel failed", err);
                });
            }, function (err) {
                console.log("AgoraRTC client init failed", err);
            });

            channelKey = "";
            client.on('error', function (err) {
                console.log("Got error msg:", err.reason);
                if (err.reason === 'DYNAMIC_KEY_TIMEOUT') {
                    client.renewChannelKey(channelKey, function () {
                        console.log("Renew channel key successfully");
                    }, function (err) {
                        console.log("Renew channel key failed: ", err);
                    });
                }
            });


            client.on('stream-added', function (evt) {
                var stream = evt.stream;
                console.log("New stream added: " + stream.getId());
                console.log("Subscribe ", stream);
                client.subscribe(stream, function (err) {
                    console.log("Subscribe stream failed", err);
                });
            });

            client.on('stream-subscribed', function (evt) {
                var stream = evt.stream;
                console.log("Subscribe remote stream successfully: " + stream.getId());
                if ($('div#video #agora_remote' + stream.getId()).length === 0) {
                    $('div#video').append('<div id="agora_remote' + stream.getId() + '" style="float:left; width:1090px;height:80%;display:inline-block;"></div>');
                }
                stream.play('agora_remote' + stream.getId());
            });

            client.on('stream-removed', function (evt) {
                var stream = evt.stream;
                stream.stop();
                $('#agora_remote' + stream.getId()).remove();
                console.log("Remote stream is removed " + stream.getId());
            });

            client.on('peer-leave', function (evt) {
                var stream = evt.stream;
                if (stream) {
                    stream.stop();
                    $('#agora_remote' + stream.getId()).remove();
                    console.log(evt.uid + " leaved from this channel");
                }
            });
        }

        function leave() {
            document.getElementById("leave").disabled = true;
            client.leave(function () {
                console.log("Leavel channel successfully");
            }, function (err) {
                console.log("Leave channel failed");
            });
        }

        function publish() {
            document.getElementById("publish").disabled = true;
            document.getElementById("unpublish").disabled = false;
            client.publish(localStream, function (err) {
                console.log("Publish local stream error: " + err);
            });
        }

        function unpublish() {
            document.getElementById("publish").disabled = false;
            document.getElementById("unpublish").disabled = true;
            client.unpublish(localStream, function (err) {
                console.log("Unpublish local stream failed" + err);
            });
        }

        function getDevices() {
            AgoraRTC.getDevices(function (devices) {
                for (var i = 0; i !== devices.length; ++i) {
                    var device = devices[i];
                    var option = document.createElement('option');
                    option.value = device.deviceId;
                    if (device.kind === 'audioinput') {
                        option.text = device.label || 'microphone ' + (audioSelect.length + 1);
                        audioSelect.appendChild(option);
                    } else if (device.kind === 'videoinput') {
                        option.text = device.label || 'camera ' + (videoSelect.length + 1);
                        videoSelect.appendChild(option);
                    } else {
                        console.log('Some other kind of source/device: ', device);
                    }
                }
            });
        }

        //audioSelect.onchange = getDevices;
        //videoSelect.onchange = getDevices;
        getDevices();
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js"></script>
    <script src="https://code.jquery.com/jquery-1.11.1.js"></script>
    <script>
        $(function () {
            var socket = io();
            $('form').submit(function (e) {
                e.preventDefault(); // prevents page reloading
                socket.emit('chat message', $('#m').val());
                $('#m').val('');
                return false;
            });
            socket.on('chat message', function (msg) {
                $('#messages').append($('<li>').text(msg));
            });
        });
    </script>

    <!-- Bootstrap core JavaScript-->
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
        integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
        crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
        integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
        crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
        integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
        crossorigin="anonymous"></script>

</body>

</html>